#!/bin/zsh
# Exit on error and make pipelines fail if any component fails
set -euo pipefail

ts() { date '+%Y-%m-%d %H:%M:%S'; }
log() { echo "$(ts) | $*"; }

# Detect home network or fallback to Tailscale/Macbook
MACBOOK_IP="192.168.0.77"
MACMINI_IP="192.168.0.250"
TAILSCALE_MACBOOK="macbook"  # or your Macbook/server Tailscale IP
TAILSCALE_MACMINI="server"  # or your Macmini/server Tailscale IP

# Try pinging home IP (timeout 1s, 1 packet)
log "Checking home network connectivity..."
if ping -c 1 -W 1 $MACBOOK_IP >/dev/null 2>&1; then
    DEST_HOST="$MACBOOK_IP"
    SOURCE_HOST="$MACMINI_IP"
    log "Home network detected: using DEST=$DEST_HOST, SOURCE=$SOURCE_HOST"
else
    DEST_HOST="$TAILSCALE_MACBOOK"
    SOURCE_HOST="$TAILSCALE_MACMINI"
    log "Home network not detected: using DEST=$DEST_HOST, SOURCE=$SOURCE_HOST"
fi

POSTGRES_DB="racing-api"
POSTGRES_USER="postgres"

log "Starting sync of racing data via view..."

# Reference tables
log "Syncing reference tables..."
# api.feedback_date
log "  - api.feedback_date: TRUNCATE on DEST ($DEST_HOST)"
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE api.feedback_date;"
log "  - api.feedback_date: COPY from SOURCE ($SOURCE_HOST) to DEST ($DEST_HOST)"
psql -h $SOURCE_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "COPY (SELECT * FROM api.feedback_date) TO STDOUT" | \
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "COPY api.feedback_date FROM STDIN"
log "  - api.feedback_date: DONE"
# entities.course
log "  - entities.course: TRUNCATE on DEST ($DEST_HOST)"
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE entities.course;"
log "  - entities.course: COPY from SOURCE ($SOURCE_HOST) to DEST ($DEST_HOST)"
psql -h $SOURCE_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "COPY (SELECT * FROM entities.course) TO STDOUT" | \
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "COPY entities.course FROM STDIN"
log "  - entities.course: DONE"

log "  - bf_raw.today_horse: TRUNCATE on DEST ($DEST_HOST)"
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE bf_raw.today_horse;"
log "  - bf_raw.today_horse: COPY from SOURCE ($SOURCE_HOST) to DEST ($DEST_HOST)"
psql -h $SOURCE_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "COPY (SELECT * FROM bf_raw.today_horse) TO STDOUT" | \
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "COPY bf_raw.today_horse FROM STDIN"
log "  - bf_raw.today_horse: DONE"

log "  - bf_raw.today_betfair_market_ids: TRUNCATE on DEST ($DEST_HOST)"
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE bf_raw.today_betfair_market_ids;"
log "  - bf_raw.today_betfair_market_ids: COPY from SOURCE ($SOURCE_HOST) to DEST ($DEST_HOST)"
psql -h $SOURCE_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "COPY (SELECT * FROM bf_raw.today_betfair_market_ids) TO STDOUT" | \
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "COPY bf_raw.today_betfair_market_ids FROM STDIN"
log "  - bf_raw.today_betfair_market_ids: DONE"

log "  - live_betting.updated_price_data: TRUNCATE on SOURCE ($SOURCE_HOST)"
psql -h $SOURCE_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE live_betting.updated_price_data;"
log "  - live_betting.updated_price_data: TRUNCATE on DEST ($DEST_HOST)"
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE live_betting.updated_price_data;"

log "  - live_betting.market_state: TRUNCATE on SOURCE ($SOURCE_HOST)"
psql -h $SOURCE_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE live_betting.market_state;"
log "  - live_betting.market_state: TRUNCATE on DEST ($DEST_HOST)"
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE live_betting.market_state;"

log "  - live_betting.upcoming_bets: TRUNCATE on SOURCE ($SOURCE_HOST)"
psql -h $SOURCE_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE live_betting.upcoming_bets;"
log "  - live_betting.upcoming_bets: TRUNCATE on DEST ($DEST_HOST)"
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE live_betting.upcoming_bets;"

log "  - live_betting.live_results: TRUNCATE on SOURCE ($SOURCE_HOST)"
psql -h $SOURCE_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE live_betting.live_results;"
log "  - live_betting.live_results: TRUNCATE on DEST ($DEST_HOST)"
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE live_betting.live_results;"

# Main racing data using view
log "Syncing main racing data from view..."
log "  - public.unioned_results_data: TRUNCATE on DEST ($DEST_HOST)"
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "TRUNCATE public.unioned_results_data;"
log "  - public.unioned_results_data: COPY from SOURCE ($SOURCE_HOST) to DEST ($DEST_HOST) via view public.unioned_results_data_subset_vw"
psql -h $SOURCE_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "COPY (SELECT * FROM public.unioned_results_data_subset_vw) TO STDOUT" | \
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "COPY public.unioned_results_data FROM STDIN"
# Update statistics for optimal query performance
log "Updating table statistics on DEST ($DEST_HOST)..."
psql -h $DEST_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c "ANALYZE public.unioned_results_data;"

# Bidirectional sync for live_betting.selections (union on both sides)
log "Running bidirectional sync for live_betting.selections..."

log "Invoking sync_betting_tables script..."
zsh "$(dirname "$0")/sync_betting_tables"
log "sync_betting_tables completed."

log "Betting selections sync complete."
