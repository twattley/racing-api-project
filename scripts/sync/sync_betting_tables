#!/bin/zsh
set -euo pipefail

# Bidirectional sync for live_betting.selections between two Postgres instances.
# Goal: Unify both sides so both contain the union of rows for:
#   - live_betting.selections (conflict key: unique_id)
#
# Defaults (override via env):
#   LEFT_HOST, POSTGRES_DB  -> typically your Mac/local
#   RIGHT_HOST, POSTGRES_DB -> typically remote
#   POSTGRES_USER
#
# Example:
#   LEFT_HOST=192.168.0.77 POSTGRES_DB=racing-api-local RIGHT_HOST=192.168.0.250 POSTGRES_DB=racing-api ./scripts/sync/sync_betting_tables

LEFT_HOST=${LEFT_HOST:-"macbook"}
RIGHT_HOST=${RIGHT_HOST:-"server"}

POSTGRES_DB=${POSTGRES_DB:-"racing-api"}
POSTGRES_USER=${POSTGRES_USER:-"postgres"}

echo "Bidirectional sync for live_betting.selections"
echo "Left : ${LEFT_HOST}:${POSTGRES_DB}"
echo "Right: ${RIGHT_HOST}:${POSTGRES_DB}"

echo "Pre-clean: deleting invalid selections (valid=false) on both sides..."
psql -h "$LEFT_HOST" -d "$POSTGRES_DB" -U "$POSTGRES_USER" -c \
  "DELETE FROM live_betting.selections WHERE valid = false;"
psql -h "$RIGHT_HOST" -d "$POSTGRES_DB" -U "$POSTGRES_USER" -c \
  "DELETE FROM live_betting.selections WHERE valid = false;"

sync_one_direction() {
  SRC_HOST="$1"
  SRC_DB="$2"
  DST_HOST="$3"
  DST_DB="$4"

  echo "-- Syncing FROM ${SRC_HOST}:${SRC_DB} TO ${DST_HOST}:${DST_DB} --"

  # Selections (union via upsert)
  echo "  * selections (left->right)"
  psql -h "$SRC_HOST" -d "$SRC_DB" -U "$POSTGRES_USER" -c \
    "COPY (SELECT * FROM live_betting.selections) TO STDOUT (FORMAT binary)" | \
  psql -h "$DST_HOST" -d "$DST_DB" -U "$POSTGRES_USER" -c \
    "CREATE TEMP TABLE selections_temp AS SELECT * FROM live_betting.selections WHERE FALSE;\
     COPY selections_temp FROM STDIN (FORMAT binary);\
     INSERT INTO live_betting.selections\
     SELECT * FROM selections_temp\
     ON CONFLICT (unique_id) DO UPDATE SET\
         race_id = EXCLUDED.race_id,\
         race_time = EXCLUDED.race_time,\
         race_date = EXCLUDED.race_date,\
         horse_id = EXCLUDED.horse_id,\
         horse_name = EXCLUDED.horse_name,\
         selection_type = EXCLUDED.selection_type,\
         market_type = EXCLUDED.market_type,\
         market_id = EXCLUDED.market_id,\
         selection_id = EXCLUDED.selection_id,\
         requested_odds = EXCLUDED.requested_odds,\
         valid = EXCLUDED.valid,\
         invalidated_at = EXCLUDED.invalidated_at,\
         invalidated_reason = EXCLUDED.invalidated_reason,\
         size_matched = EXCLUDED.size_matched,\
         average_price_matched = EXCLUDED.average_price_matched,\
         cashed_out = EXCLUDED.cashed_out,\
         fully_matched = EXCLUDED.fully_matched,\
         customer_strategy_ref = EXCLUDED.customer_strategy_ref,\
         processed_at = EXCLUDED.processed_at;\
     DROP TABLE selections_temp;"
}

# Run both directions to achieve union on both sides
sync_one_direction "$LEFT_HOST" "$POSTGRES_DB" "$RIGHT_HOST" "$POSTGRES_DB"
sync_one_direction "$RIGHT_HOST" "$POSTGRES_DB" "$LEFT_HOST" "$POSTGRES_DB"

echo "Bidirectional sync finished."
