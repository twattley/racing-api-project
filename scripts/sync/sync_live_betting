#!/bin/zsh
set -euo pipefail

LEFT_HOST="localhost"
RIGHT_HOST="server"

POSTGRES_DB="racing-api"
POSTGRES_USER="postgres"

SYNC_INTERVAL=60
ERROR_SLEEP=10
WINDOW_DAYS=7

echo "Starting bidirectional continuous live_betting sync";
echo "Left : ${LEFT_HOST}:${POSTGRES_DB}";
echo "Right: ${RIGHT_HOST}:${POSTGRES_DB}";
echo "Window: last ${WINDOW_DAYS} days | Interval: ${SYNC_INTERVAL}s | Error retry: ${ERROR_SLEEP}s";
echo "Press Ctrl+C to exit";
echo "";

# Compute window start (using LEFT DB time as reference). Could also choose NOW().
window_start() {
    psql -h "$1" -d "$2" -U "$POSTGRES_USER" -At -c "SELECT (CURRENT_DATE - INTERVAL '${WINDOW_DAYS} days')::timestamp" 2>/dev/null || echo "1970-01-01 00:00:00"
}

sync_direction() {
    SRC_HOST="$1"; SRC_DB="$2"; DST_HOST="$3"; DST_DB="$4";
    DIRECTION_LABEL="$SRC_HOST:$SRC_DB -> $DST_HOST:$DST_DB"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Direction: ${DIRECTION_LABEL}"

    WINDOW_START=$(window_start "$SRC_HOST" "$SRC_DB")
    echo "  - Window start: $WINDOW_START"

    # Selections
    echo "  - syncing live_betting.selections"
    psql -h "$SRC_HOST" -d "$SRC_DB" -U "$POSTGRES_USER" -c \
        "COPY (SELECT * FROM live_betting.selections WHERE created_at >= TIMESTAMP '${WINDOW_START}') TO STDOUT (FORMAT binary)" | \
    psql -h "$DST_HOST" -d "$DST_DB" -U "$POSTGRES_USER" -c \
        "CREATE TEMP TABLE selections_temp AS SELECT * FROM live_betting.selections WHERE FALSE;\
         COPY selections_temp FROM STDIN (FORMAT binary);\
         INSERT INTO live_betting.selections\
         SELECT * FROM selections_temp\
         ON CONFLICT (unique_id) DO UPDATE SET\
                 race_id = EXCLUDED.race_id,\
                 race_time = EXCLUDED.race_time,\
                 race_date = EXCLUDED.race_date,\
                 horse_id = EXCLUDED.horse_id,\
                 horse_name = EXCLUDED.horse_name,\
                 selection_type = EXCLUDED.selection_type,\
                 market_type = EXCLUDED.market_type,\
                 market_id = EXCLUDED.market_id,\
                 selection_id = EXCLUDED.selection_id,\
                 requested_odds = EXCLUDED.requested_odds,\
                 valid = EXCLUDED.valid,\
                 invalidated_at = EXCLUDED.invalidated_at,\
                 invalidated_reason = EXCLUDED.invalidated_reason,\
                 size_matched = EXCLUDED.size_matched,\
                 average_price_matched = EXCLUDED.average_price_matched,\
                 cashed_out = EXCLUDED.cashed_out,\
                 fully_matched = EXCLUDED.fully_matched,\
                 customer_strategy_ref = EXCLUDED.customer_strategy_ref,\
                 processed_at = EXCLUDED.processed_at;\
         DROP TABLE selections_temp;"

    # market_state
    echo "  - syncing live_betting.market_state"
    psql -h "$SRC_HOST" -d "$SRC_DB" -U "$POSTGRES_USER" -c \
        "COPY (SELECT * FROM live_betting.market_state WHERE created_at >= TIMESTAMP '${WINDOW_START}') TO STDOUT (FORMAT binary)" | \
    psql -h "$DST_HOST" -d "$DST_DB" -U "$POSTGRES_USER" -c \
        "CREATE TEMP TABLE market_state_temp AS SELECT * FROM live_betting.market_state WHERE FALSE;\
         COPY market_state_temp FROM STDIN (FORMAT binary);\
         INSERT INTO live_betting.market_state\
         SELECT * FROM market_state_temp\
         ON CONFLICT (unique_id, selection_id) DO UPDATE SET\
                 bet_selection_id = EXCLUDED.bet_selection_id,\
                 bet_type = EXCLUDED.bet_type,\
                 market_type = EXCLUDED.market_type,\
                 race_id = EXCLUDED.race_id,\
                 race_date = EXCLUDED.race_date,\
                 market_id_win = EXCLUDED.market_id_win,\
                 market_id_place = EXCLUDED.market_id_place,\
                 number_of_runners = EXCLUDED.number_of_runners,\
                 back_price_win = EXCLUDED.back_price_win,\
                 horse_id = EXCLUDED.horse_id,\
                 created_at = EXCLUDED.created_at;\
         DROP TABLE market_state_temp;"

    # upcoming_bets
    echo "  - syncing live_betting.upcoming_bets"
    psql -h "$SRC_HOST" -d "$SRC_DB" -U "$POSTGRES_USER" -c \
        "COPY (SELECT * FROM live_betting.upcoming_bets WHERE created_at >= TIMESTAMP '${WINDOW_START}') TO STDOUT (FORMAT binary)" | \
    psql -h "$DST_HOST" -d "$DST_DB" -U "$POSTGRES_USER" -c \
        "CREATE TEMP TABLE upcoming_bets_temp AS SELECT * FROM live_betting.upcoming_bets WHERE FALSE;\
         COPY upcoming_bets_temp FROM STDIN (FORMAT binary);\
         INSERT INTO live_betting.upcoming_bets\
         SELECT * FROM upcoming_bets_temp\
         ON CONFLICT (unique_id) DO UPDATE SET\
                 race_id = EXCLUDED.race_id,\
                 race_time = EXCLUDED.race_time,\
                 race_date = EXCLUDED.race_date,\
                 horse_id = EXCLUDED.horse_id,\
                 horse_name = EXCLUDED.horse_name,\
                 selection_type = EXCLUDED.selection_type,\
                 market_type = EXCLUDED.market_type,\
                 market_id = EXCLUDED.market_id,\
                 selection_id = EXCLUDED.selection_id,\
                 requested_odds = EXCLUDED.requested_odds,\
                 valid = EXCLUDED.valid,\
                 invalidated_at = EXCLUDED.invalidated_at,\
                 invalidated_reason = EXCLUDED.invalidated_reason,\
                 size_matched = EXCLUDED.size_matched,\
                 average_price_matched = EXCLUDED.average_price_matched,\
                 cashed_out = EXCLUDED.cashed_out,\
                 fully_matched = EXCLUDED.fully_matched,\
                 customer_strategy_ref = EXCLUDED.customer_strategy_ref,\
                 created_at = EXCLUDED.created_at,\
                 processed_at = EXCLUDED.processed_at,\
                 bet_outcome = EXCLUDED.bet_outcome,\
                 price_matched = EXCLUDED.price_matched,\
                 profit = EXCLUDED.profit,\
                 commission = EXCLUDED.commission,\
                 side = EXCLUDED.side;\
         DROP TABLE upcoming_bets_temp;"

    # live_results
    echo "  - syncing live_betting.live_results"
    psql -h "$SRC_HOST" -d "$SRC_DB" -U "$POSTGRES_USER" -c \
        "COPY (SELECT * FROM live_betting.live_results WHERE created_at >= TIMESTAMP '${WINDOW_START}') TO STDOUT (FORMAT binary)" | \
    psql -h "$DST_HOST" -d "$DST_DB" -U "$POSTGRES_USER" -c \
        "CREATE TEMP TABLE live_results_temp AS SELECT * FROM live_betting.live_results WHERE FALSE;\
         COPY live_results_temp FROM STDIN (FORMAT binary);\
         INSERT INTO live_betting.live_results\
         SELECT * FROM live_results_temp\
         ON CONFLICT (unique_id) DO UPDATE SET\
                 race_id = EXCLUDED.race_id,\
                 race_time = EXCLUDED.race_time,\
                 race_date = EXCLUDED.race_date,\
                 horse_id = EXCLUDED.horse_id,\
                 horse_name = EXCLUDED.horse_name,\
                 selection_type = EXCLUDED.selection_type,\
                 market_type = EXCLUDED.market_type,\
                 market_id = EXCLUDED.market_id,\
                 selection_id = EXCLUDED.selection_id,\
                 requested_odds = EXCLUDED.requested_odds,\
                 valid = EXCLUDED.valid,\
                 invalidated_at = EXCLUDED.invalidated_at,\
                 invalidated_reason = EXCLUDED.invalidated_reason,\
                 size_matched = EXCLUDED.size_matched,\
                 average_price_matched = EXCLUDED.average_price_matched,\
                 cashed_out = EXCLUDED.cashed_out,\
                 fully_matched = EXCLUDED.fully_matched,\
                 customer_strategy_ref = EXCLUDED.customer_strategy_ref,\
                 created_at = EXCLUDED.created_at,\
                 processed_at = EXCLUDED.processed_at,\
                 bet_outcome = EXCLUDED.bet_outcome,\
                 price_matched = EXCLUDED.price_matched,\
                 profit = EXCLUDED.profit,\
                 commission = EXCLUDED.commission,\
                 side = EXCLUDED.side;\
         DROP TABLE live_results_temp;"
}

main_cycle() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting full bidirectional cycle"
    sync_direction "$LEFT_HOST" "$POSTGRES_DB" "$RIGHT_HOST" "$POSTGRES_DB"
    sync_direction "$RIGHT_HOST" "$POSTGRES_DB" "$LEFT_HOST" "$POSTGRES_DB"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Cycle complete"
}

trap 'echo "\nInterrupted. Exiting..."; exit 0' INT TERM

while true; do
    if main_cycle; then
        echo "Sleeping ${SYNC_INTERVAL}s..."; sleep "$SYNC_INTERVAL"
    else
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR during sync cycle. Retrying in ${ERROR_SLEEP}s..." >&2
        sleep "$ERROR_SLEEP"
    fi
done
