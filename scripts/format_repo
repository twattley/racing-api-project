#!/bin/sh
# Script to format and lint the entire monorepo using globally installed tools (via pipx).

# --- Configuration ---
# Determine the absolute path to the monorepo root.
# This assumes this script is located in the 'scripts' directory,
# which is directly under the monorepo root.
MONOREPO_ROOT="$(dirname "$(dirname "$0")")"

# Directories containing Python code within your monorepo to target
TARGET_CODE_DIRS="apps libraries notebooks" # Added notebooks here, adjust if needed

# --- Navigate to monorepo root ---
# Important for tools to correctly find files across the workspace
echo "Changing to monorepo root: $MONOREPO_ROOT"
cd "$MONOREPO_ROOT" || { echo "Failed to change to monorepo root." >&2; exit 1; }

# --- Run Formatting and Linting Tools ---
# Ensure these tools (autoflake, isort, black, ruff, bandit, detect-secrets) are installed globally via pipx.
# For example: pipx install autoflake isort black ruff bandit detect-secrets

echo "Running autoflake (removes unused imports and variables)..."
# autoflake is often run first to clean up the code before other formatters.
# --in-place: Modifies files directly.
# --recursive: Processes directories recursively.
# --remove-all-unused-imports: Removes all unused imports.
# --remove-unused-variables: Removes unused variables.
# --ignore-init-module-imports: Prevents removing imports from __init__.py if they're used by other modules in the package.
# --exclude: Excludes directories (like virtual environments, build artifacts).
autoflake --in-place --recursive \
          --remove-all-unused-imports --remove-unused-variables --ignore-init-module-imports \
          --exclude .venv,build,dist,htmlcov,*egg-info*,__pycache__ \
          $TARGET_CODE_DIRS

echo "Running isort (sorts imports)..."
# isort: Ensures imports are sorted and grouped correctly.
# --profile black: Uses a configuration compatible with Black.
# .: Runs on the current directory (monorepo root), finding all Python files.
isort --profile black .

echo "Running black (formats code for consistent style)..."
# black: An uncompromising code formatter.
# .: Formats files in the current directory (monorepo root).
black .

echo "Running bandit (security linting - checks for secrets and vulnerabilities)..."
# bandit: Security linter that scans Python code for common security issues.
# -r: Recursive scan of directories.
# -f txt: Output format (can be json, csv, txt, html, etc.).
# --exclude: Excludes directories (same pattern as autoflake).
# --severity-level high: Only report high severity issues.
# The scan will fail (exit code 1) if any issues are found, which is good for CI/CD.
bandit -r $TARGET_CODE_DIRS \
       --exclude .venv,build,dist,htmlcov,*egg-info*,__pycache__,tests \
       --severity-level high \
       -f txt

echo "Running detect-secrets (scans for potential secrets and credentials)..."
# detect-secrets: Scans for potential secrets like API keys, passwords, tokens, etc.
# scan: Scans files for secrets
# --all-files: Scans all files (not just staged git files)
# --disable-plugin KeywordDetector: Reduces false positives from common words
# --exclude-files: Excludes patterns (supports regex)
# Redirect output to temp file and only show if secrets are found
SECRETS_OUTPUT=$(mktemp)
if detect-secrets scan --all-files \
                      --disable-plugin KeywordDetector \
                      --exclude-files '.venv/.*|build/.*|dist/.*|htmlcov/.*|.*egg-info.*|__pycache__/.*|tests/.*' \
                      $TARGET_CODE_DIRS > "$SECRETS_OUTPUT" 2>&1; then
    echo "✅ No secrets detected."
else
    echo "⚠️  Potential secrets detected:"
    cat "$SECRETS_OUTPUT"
fi
rm -f "$SECRETS_OUTPUT"

# echo "Running ruff check --fix (linting and fixing common issues)..."
# # ruff check: A fast linter that can also fix many issues.
# # --fix: Applies fixes for fixable rules automatically.
# # .: Runs on the current directory.
# ruff check --fix .

# echo "Running ruff format (fast, Black-compatible formatting)..."
# # ruff format: Ruff's built-in formatter, which is Black-compatible.
# # This ensures consistency with Ruff's own formatting rules.
# # .: Formats files in the current directory.
# ruff format .

echo "Code formatting, linting, and security scanning complete across the monorepo!"